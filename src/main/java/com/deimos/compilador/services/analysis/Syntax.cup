package com.deimos.compilador.services.analysis;

import com.deimos.compilador.model.errors.CompilationError;
import com.deimos.compilador.model.errors.ErrorType;
import com.deimos.compilador.services.ErrorHandlerService;
import java_cup.runtime.Symbol;
import java.util.List;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:}

action code {:

private void syntaxError(String id, int line, String message){
    List<CompilationError> errors = ErrorHandlerService.compilationErrors.getErrors();
    CompilationError syntaxError = new CompilationError(id, message, ErrorType.SYNTAX, line);
    errors.add(syntaxError);
}

private static final String NOT_A_STATEMENT_ERROR_CODE = "003";
private static final String NOT_A_DECLARATION_ERROR_CODE = "004";
private static final String EXPECTED_SEMI_COLON_ERROR_CODE = "005";
private static final String MISSING_CLOSING_BRACKET_ERROR_CODE = "006";
private static final String MAIN_PROGRAM_EXPECTED_ERROR_CODE = "007";
private static final String INIT_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String ITERATE_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String EXPECTED_IDENTIFIER_ERROR_CODE = "009";
private static final String EXPECTED_PROGRAM_KEYWORD_ERROR_CODE = "010";
private static final String VALUE_EXPECTED_ERROR_CODE = "011";
private static final String FUNCTION_BODY_ERROR = "012";

private static final String NOT_A_STATEMENT_MESSAGE = "Not a statement";
private static final String NOT_A_DECLARATION_MESSAGE = "Not a declaration";
private static final String EXPECTED_SEMI_COLON_MESSAGE = "<;> Expected";
private static final String MISSING_CLOSING_BRACKET_MESSAGE = "<}> Expected";
private static final String MAIN_PROGRAM_EXPECTED_MESSAGE = "<main> Program Expected";
private static final String INIT_FUNCTION_EXPECTED_MESSAGE = "<init> Function Expected";
private static final String ITERATE_FUNCTION_EXPECTED_MESSAGE = "<iterate> Function Expected";
private static final String EXPECTED_IDENTIFIER_MESSAGE = "<identifier> Expected";
private static final String EXPECTED_PROGRAM_KEYWORD_MESSAGE = "<program> Keyword Expected";
private static final String VALUE_EXPECTED_MESSAGE = "<value> Expected";
private static final String FUNCTION_BODY_MESSAGE = "Bad syntax < (value) > Expected";

:}

terminal
    ABSTRACT, 
    BOOLEAN,
    BREAK, 
    PROGRAM,

    INIT,
    ITERATE,
    IF,
    ELSE,
    FOR, 
    WHILE,

    INT,
    STRING, 
    FLOAT,

    START,
    WAIT,
    PRINT,
    MODE,
    A_READ,
    A_WRITE,
    D_READ,
    D_WRITE,
    
    IDENTIFIER,
    PIN,
    INTEGER_LITERAL,
    STRING_LITERAL,

    ADDITION, 
    SUBTRACTION, 
    MULTIPLICATION,

    DIVISION, 
    MODULUS, 
    INCREMENT,
    DECREMENT, 
    ASSIGNMENT, 
    ASSIGNMENT_ADDITION,
    ASSIGNMENT_SUBTRACTION, 
    ASSIGNMENT_MULTIPLICATION, 
    ASSIGNMENT_DIVISION,
    ASSIGNMENT_MODULUS, 
    EQUAL_TO, 
    NOT_EQUAL,
    GREATER_THAN, 
    LESS_THAN, 
    GREATHER_THAN_OR_EQUAL_TO,
    LESS_THAN_OR_EQUAL_TO,

    AND,
    OR,

    SEMI,
    LBRACKET,
    RBRACKET,
    LPAR,
    RPAR,

    INVALID_NUMBER,
    COMA,
    ERROR
;

non terminal
    mainProgram,
    mainProgramError,

    mainProgramSignature,
    mainProgramSignatureError,

    mainProgramBody,
    mainProgramBodyError,

    mainInit,
    initBody,
    mainIteration,
    iterationBody,

    globalVariable,
    globalVariables,
    globaldeclarationError,

    stmts,
    stmtError,

    assignment,
    assignmentType,

    declaration,
    declarationType,
    declarationBody,
    declarationAssignment,

    value,
    valueRead,
    valueReadError,

    function,
    functionType,
    functionBody,
    functionType2,
    functionBody2,
    functionError
;

start with mainProgram;

/* ---- mainProgram ---- */

mainProgram ::=
        mainProgramSignature mainProgramBody 
    |   mainProgramError
;

mainProgramError ::=
        mainProgramBody:e
            {: syntaxError(EXPECTED_PROGRAM_KEYWORD_ERROR_CODE, eleft+1, EXPECTED_PROGRAM_KEYWORD_MESSAGE); 
               syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE); :}
    |   error:e
            {: syntaxError(MAIN_PROGRAM_EXPECTED_ERROR_CODE, eleft+1, MAIN_PROGRAM_EXPECTED_MESSAGE); :}
 ;

mainProgramSignature ::=
         PROGRAM IDENTIFIER 
    |    mainProgramSignatureError
;

mainProgramSignatureError ::=
        IDENTIFIER:e
            {: syntaxError(EXPECTED_PROGRAM_KEYWORD_ERROR_CODE, eleft+1, EXPECTED_PROGRAM_KEYWORD_MESSAGE); :} 
    |   PROGRAM:e
            {: syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE); :}
;

mainProgramBody ::=
        LBRACKET globalVariables mainInit globalVariables mainIteration globalVariables RBRACKET
    |   LBRACKET globalVariables mainIteration globalVariables mainInit globalVariables RBRACKET
    |   mainProgramBodyError
;

mainProgramBodyError ::=
        LBRACKET:e globalVariables mainInit globalVariables RBRACKET
            {: syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE); :}
    |   LBRACKET:e globalVariables mainIteration globalVariables RBRACKET
            {: syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE); :}
    |   LBRACKET:e globalVariables RBRACKET
            {: syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE);
               syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE); :}
;

/* ---- globalVariables ---- */

globalVariables ::=
        globalVariable globalVariables
    |   /* empty */
;

globalVariable ::=
        declaration SEMI
    |   globaldeclarationError
;

globaldeclarationError ::=
        declaration:e
            {: syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); :}
    |   error:e
            {: syntaxError(NOT_A_DECLARATION_ERROR_CODE, eleft+1, NOT_A_DECLARATION_MESSAGE); :} 
;

/* ---- mainInit ---- */

mainInit ::=
        INIT LPAR RPAR LBRACKET initBody
;

initBody ::=
        stmts initBody
    |   RBRACKET
;

/* ---- mainIteration ---- */

mainIteration ::=
        ITERATE LPAR RPAR LBRACKET iterationBody
;

iterationBody ::=
        stmts iterationBody
    |   RBRACKET
;

/* ---- stmts ---- */

stmts ::=
        declaration SEMI
    |   assignment SEMI
    |   function SEMI
    |   stmtError
;

stmtError ::=
        declaration:e
            {: syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); :}
    |   assignment:e
            {: syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); :}
    |   function:e
            {: syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); :}
    |   error:e
            {: syntaxError(NOT_A_STATEMENT_ERROR_CODE, eleft+1, NOT_A_STATEMENT_MESSAGE); :} 
;

/* ---- declaration ---- */

declaration ::=
        declarationType declarationBody
;

declarationType ::=
        INT
    |   STRING 
    |   FLOAT
;

declarationBody ::=
        IDENTIFIER
    |   IDENTIFIER declarationAssignment
;

declarationAssignment ::=
        assignmentType value
;

/* ---- assignment ---- */

assignment ::=
        IDENTIFIER assignmentType value
;

assignmentType ::=
        ASSIGNMENT
    |   ASSIGNMENT_ADDITION
    |   ASSIGNMENT_SUBTRACTION
    |   ASSIGNMENT_MULTIPLICATION
    |   ASSIGNMENT_DIVISION
    |   ASSIGNMENT_MODULUS
;

/* ---- function ---- */

function ::=
        functionType functionBody
    |   functionType2 functionBody2
    |   functionError
;

functionType ::=
        START
    |   WAIT
    |   PRINT
;

functionType2 ::=
        MODE
    |   A_WRITE
    |   D_WRITE
;

functionBody ::=
        LPAR value RPAR
;

functionBody2 ::=
        LPAR value COMA value RPAR
;

functionError ::=
        functionType error:e
            {: syntaxError(FUNCTION_BODY_ERROR, eleft+1, FUNCTION_BODY_MESSAGE); :} 
     |  functionType2 error:e
            {: syntaxError(FUNCTION_BODY_ERROR, eleft+1, FUNCTION_BODY_MESSAGE); :} 
;

/* Values */

value ::=
        INTEGER_LITERAL
    |   STRING_LITERAL
    |   IDENTIFIER
    |   valueRead
;

valueRead ::=
        A_READ LPAR PIN RPAR
    |   D_READ LPAR PIN RPAR
    |   valueReadError
;

valueReadError ::=
        A_READ LPAR:e RPAR
            {: syntaxError(VALUE_EXPECTED_ERROR_CODE, eleft+1, VALUE_EXPECTED_MESSAGE); :}
    |   D_READ LPAR:e RPAR
            {: syntaxError(VALUE_EXPECTED_ERROR_CODE, eleft+1, VALUE_EXPECTED_MESSAGE); :}
    |   A_READ:e
            {: syntaxError(FUNCTION_BODY_ERROR, eleft+1, FUNCTION_BODY_MESSAGE); :} 
    |   D_READ:e
            {: syntaxError(FUNCTION_BODY_ERROR, eleft+1, FUNCTION_BODY_MESSAGE); :} 
;