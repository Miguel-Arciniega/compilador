
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 08 00:08:39 MST 2022
//----------------------------------------------------

package com.deimos.compilador.services.analysis;

import com.deimos.compilador.model.errors.CompilationError;
import com.deimos.compilador.model.errors.ErrorType;
import com.deimos.compilador.services.ErrorHandlerService;
import com.deimos.compilador.model.errors.statement.Statement;
import com.deimos.compilador.services.StatementHandlerService;
import java_cup.runtime.Symbol;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 08 00:08:39 MST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\003\000\002\010\006\000\002" +
    "\010\006\000\002\010\003\000\002\011\006\000\002\011" +
    "\006\000\002\011\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\013\004\000\002\014\005\000\002\014\003\000\002" +
    "\015\004\000\002\016\003\000\002\016\002\000\002\017" +
    "\004\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\026\004\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\004\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\003\000\002\041\003\000\002\042\004\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\007\000\002\044\003\000\002\045\003\000\002\046\004" +
    "\000\002\047\003\000\002\047\003\000\002\050\003\000" +
    "\002\051\004\000\002\052\004\000\002\053\005\000\002" +
    "\053\003\000\002\054\004\000\002\054\003\000\002\053" +
    "\002\000\002\055\005\000\002\056\004\000\002\056\002" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\003\000\002\057\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\061" +
    "\005\000\002\061\005\000\002\061\003\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\004\000\002" +
    "\063\005\000\002\063\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\010\003\004\007\011\031\006\001\002\000" +
    "\004\002\ufffe\001\002\000\024\002\ufffc\003\ufffc\010\ufffc" +
    "\011\ufffc\016\ufffc\017\ufffc\020\ufffc\063\ufffc\064\ufffc\001" +
    "\002\000\024\002\ufffa\003\ufffa\010\ufffa\011\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\063\ufffa\064\ufffa\001\002\000\024\002" +
    "\uffe6\003\030\010\uffe6\011\uffe6\016\017\017\024\020\032" +
    "\063\031\064\uffe6\001\002\000\004\002\014\001\002\000" +
    "\026\002\ufffb\003\ufffb\010\ufffb\011\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\031\013\063\ufffb\064\ufffb\001\002\000\004\002" +
    "\uffff\001\002\000\024\002\ufffd\003\ufffd\010\ufffd\011\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\063\ufffd\064\ufffd\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufff7\001\002\000\012" +
    "\002\uffe7\010\uffe7\011\uffe7\064\uffe7\001\002\000\010\007" +
    "\327\027\326\031\325\001\002\000\024\002\uffd5\003\uffd5" +
    "\010\uffd5\011\uffd5\016\uffd5\017\uffd5\020\uffd5\062\324\064" +
    "\uffd5\001\002\000\022\002\uffd8\003\030\010\uffd8\011\uffd8" +
    "\016\017\017\024\020\032\064\uffd8\001\002\000\004\002" +
    "\000\001\002\000\022\002\uffd6\003\uffd6\010\uffd6\011\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\064\uffd6\001\002\000\006\025" +
    "\313\031\314\001\002\000\004\002\ufff8\001\002\000\004" +
    "\002\ufff4\001\002\000\012\002\uffee\010\047\011\052\064" +
    "\046\001\002\000\022\002\uffd4\003\uffd4\010\uffd4\011\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\064\uffd4\001\002\000\022\002" +
    "\uffe6\003\030\010\uffe6\011\uffe6\016\017\017\024\020\032" +
    "\064\uffe6\001\002\000\006\007\034\031\033\001\002\000" +
    "\004\044\040\001\002\000\004\044\035\001\002\000\006" +
    "\033\036\034\037\001\002\000\066\002\uffcb\003\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\062\uffcb\064\uffcb\001\002\000\066\002" +
    "\uffc8\003\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\062\uffc8\064\uffc8\001" +
    "\002\000\006\033\041\034\042\001\002\000\066\002\uffd1" +
    "\003\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\062\uffd1\064\uffd1\001\002" +
    "\000\066\002\uffce\003\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\062\uffce" +
    "\064\uffce\001\002\000\004\002\ufff9\001\002\000\020\002" +
    "\uffe6\003\030\010\uffe6\016\017\017\024\020\032\064\uffe6" +
    "\001\002\000\004\063\uffe3\001\002\000\004\002\ufff1\001" +
    "\002\000\010\063\uffe0\065\301\066\302\001\002\000\020" +
    "\002\uffe6\003\030\011\uffe6\016\017\017\024\020\032\064" +
    "\uffe6\001\002\000\004\063\056\001\002\000\010\063\uffda" +
    "\065\266\066\267\001\002\000\004\063\uffdd\001\002\000" +
    "\004\063\056\001\002\000\020\002\uffe5\003\uffe5\011\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\064\uffe5\001\002\000\056\003" +
    "\uff94\007\uff94\012\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\064\uff94\001\002\000\056\003\107\007\074\012" +
    "\067\016\017\017\024\020\032\021\110\022\117\023\106" +
    "\024\113\025\116\026\066\027\070\030\100\031\065\044" +
    "\111\045\062\046\102\047\104\050\075\051\061\064\073" +
    "\001\002\000\060\003\uff8e\007\uff8e\012\uff8e\016\uff8e\017" +
    "\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\062\265\064\uff8e\001\002" +
    "\000\066\003\uffb4\007\uffb4\012\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\036\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\062\uffb4\064\uffb4" +
    "\065\uffb4\001\002\000\066\003\uffb8\007\uffb8\012\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\036" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\062\uffb8\064\uffb8\065\uffb8\001\002\000\056\003\uff90\007" +
    "\uff90\012\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\064\uff90\001\002\000\060\003\uff8c\007\uff8c\012\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\062\264\064\uff8c" +
    "\001\002\000\016\044\257\045\062\046\102\047\104\050" +
    "\075\051\061\001\002\000\006\003\uffa6\065\uffa6\001\002" +
    "\000\010\003\214\063\uff97\065\215\001\002\000\016\044" +
    "\206\045\062\046\102\047\104\050\075\051\061\001\002" +
    "\000\060\003\uffb3\007\uffb3\012\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\062\uffb3\064\uffb3\001\002\000\060" +
    "\003\uffba\007\uffba\012\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\062\uffba\064\uffba\001\002\000\064\002\uff96" +
    "\003\uff96\007\uff96\010\uff96\011\uff96\012\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\044\uff96\045\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\064\uff96\001\002\000\016" +
    "\044\201\045\062\046\102\047\104\050\075\051\061\001" +
    "\002\000\066\003\uffb5\007\uffb5\012\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\036\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\062\uffb5\064" +
    "\uffb5\065\uffb5\001\002\000\004\063\056\001\002\000\060" +
    "\003\uffb2\007\uffb2\012\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\062\uffb2\064\uffb2\001\002\000\006\003\uffa5" +
    "\065\uffa5\001\002\000\006\003\153\065\154\001\002\000" +
    "\066\003\uffb7\007\uffb7\012\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\036\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\062\uffb7\064\uffb7\065" +
    "\uffb7\001\002\000\060\003\uffbb\007\uffbb\012\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\062\uffbb\064\uffbb\001" +
    "\002\000\066\003\uffb6\007\uffb6\012\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\036\uffb6\044\uffb6" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\062\uffb6\064" +
    "\uffb6\065\uffb6\001\002\000\060\003\uff8d\007\uff8d\012\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\062\176\064" +
    "\uff8d\001\002\000\006\003\uffae\065\uffae\001\002\000\056" +
    "\003\uff8b\007\uff8b\012\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\064\uff8b\001\002\000\006\003\uffb0\065\uffb0" +
    "\001\002\000\060\003\uffb9\007\uffb9\012\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\062\uffb9\064\uffb9\001\002" +
    "\000\006\003\167\065\170\001\002\000\006\003\uffa7\065" +
    "\uffa7\001\002\000\056\003\uff95\007\uff95\012\uff95\016\uff95" +
    "\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025" +
    "\uff95\026\uff95\027\uff95\030\uff95\031\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\064\uff95\001\002\000" +
    "\056\003\uff8f\007\uff8f\012\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f" +
    "\050\uff8f\051\uff8f\064\uff8f\001\002\000\016\044\120\045" +
    "\062\046\102\047\104\050\075\051\061\001\002\000\006" +
    "\003\uffaf\065\uffaf\001\002\000\022\025\uffb9\027\uffb9\031" +
    "\uffb9\032\uffb9\033\164\034\165\036\uffb9\065\uffb9\001\002" +
    "\000\016\025\126\027\125\031\131\032\127\036\123\065" +
    "\124\001\002\000\006\003\153\065\154\001\002\000\016" +
    "\025\126\027\125\031\131\032\127\036\123\065\124\001" +
    "\002\000\016\025\126\027\125\031\131\032\127\036\123" +
    "\065\124\001\002\000\006\003\uff9f\065\uff9f\001\002\000" +
    "\006\003\uffa0\065\uffa0\001\002\000\116\003\uff70\007\uff70" +
    "\012\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\044\uff70\045" +
    "\uff70\046\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70" +
    "\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\061\uff70\062" +
    "\uff70\064\uff70\066\uff70\070\uff70\001\002\000\116\003\uff6f" +
    "\007\uff6f\012\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\064\uff6f\066\uff6f\070\uff6f\001\002\000\116" +
    "\003\uff71\007\uff71\012\uff71\016\uff71\017\uff71\020\uff71\021" +
    "\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71" +
    "\030\uff71\031\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041" +
    "\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71" +
    "\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060" +
    "\uff71\061\uff71\062\uff71\064\uff71\066\uff71\070\uff71\001\002" +
    "\000\072\003\uffbf\007\uffbf\012\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\035\137\036\134\037\135\040" +
    "\136\041\140\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\062\uffbf\064\uffbf\001\002\000\116\003\uff72\007" +
    "\uff72\012\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053" +
    "\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72" +
    "\062\uff72\064\uff72\066\uff72\070\uff72\001\002\000\016\025" +
    "\126\027\125\031\131\032\127\036\123\065\124\001\002" +
    "\000\016\025\126\027\125\031\131\032\127\036\123\065" +
    "\124\001\002\000\016\025\126\027\125\031\131\032\127" +
    "\036\123\065\124\001\002\000\016\025\126\027\125\031" +
    "\131\032\127\036\123\065\124\001\002\000\016\025\126" +
    "\027\125\031\131\032\127\036\123\065\124\001\002\000" +
    "\116\003\uff75\007\uff75\012\uff75\016\uff75\017\uff75\020\uff75" +
    "\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027" +
    "\uff75\030\uff75\031\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\061\uff75\062\uff75\064\uff75\066\uff75\070\uff75\001" +
    "\002\000\116\003\uff79\007\uff79\012\uff79\016\uff79\017\uff79" +
    "\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\031\uff79\035\uff79\036\uff79\037\135" +
    "\040\136\041\140\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\060\uff79\061\uff79\062\uff79\064\uff79\066\uff79\070" +
    "\uff79\001\002\000\116\003\uff76\007\uff76\012\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\035\uff76\036\uff76" +
    "\037\uff76\040\uff76\041\uff76\044\uff76\045\uff76\046\uff76\047" +
    "\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76" +
    "\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\064\uff76\066" +
    "\uff76\070\uff76\001\002\000\116\003\uff77\007\uff77\012\uff77" +
    "\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\044\uff77\045\uff77\046" +
    "\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054\uff77" +
    "\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77\064" +
    "\uff77\066\uff77\070\uff77\001\002\000\116\003\uff78\007\uff78" +
    "\012\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78" +
    "\035\uff78\036\uff78\037\135\040\136\041\140\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062" +
    "\uff78\064\uff78\066\uff78\070\uff78\001\002\000\016\035\137" +
    "\036\134\037\135\040\136\041\140\066\147\001\002\000" +
    "\116\003\uff73\007\uff73\012\uff73\016\uff73\017\uff73\020\uff73" +
    "\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027" +
    "\uff73\030\uff73\031\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\041\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051" +
    "\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73" +
    "\060\uff73\061\uff73\062\uff73\064\uff73\066\uff73\070\uff73\001" +
    "\002\000\116\003\uff74\007\uff74\012\uff74\016\uff74\017\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\031\uff74\035\uff74\036\uff74\037\135" +
    "\040\136\041\140\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\064\uff74\066\uff74\070" +
    "\uff74\001\002\000\116\003\uffa1\007\uffa1\012\uffa1\016\uffa1" +
    "\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\066" +
    "\uffa1\070\uffa1\001\002\000\116\003\uff9e\007\uff9e\012\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\064" +
    "\uff9e\066\uff9e\070\uff9e\001\002\000\116\003\uffa9\007\uffa9" +
    "\012\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\064\uffa9\066\uffa9\070\uffa9\001\002\000\010\031\157" +
    "\033\156\034\160\001\002\000\116\003\uffaa\007\uffaa\012" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\064\uffaa\066\uffaa\070\uffaa\001\002\000\004\066\163\001" +
    "\002\000\004\066\162\001\002\000\004\066\161\001\002" +
    "\000\116\003\uffac\007\uffac\012\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\064\uffac\066\uffac\070\uffac" +
    "\001\002\000\116\003\uffab\007\uffab\012\uffab\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\061\uffab\062\uffab\064\uffab\066\uffab" +
    "\070\uffab\001\002\000\116\003\uffad\007\uffad\012\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\064\uffad" +
    "\066\uffad\070\uffad\001\002\000\060\003\uffc1\007\uffc1\012" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\062\uffc1" +
    "\064\uffc1\001\002\000\060\003\uffc0\007\uffc0\012\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\062\uffc0\064\uffc0" +
    "\001\002\000\060\003\uffa3\007\uffa3\012\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\062\uffa3\064\uffa3\001\002" +
    "\000\060\003\uffa2\007\uffa2\012\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\062\uffa2\064\uffa2\001\002\000\016" +
    "\025\126\027\125\031\131\032\127\036\123\065\124\001" +
    "\002\000\060\003\uffa8\007\uffa8\012\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\062\uffa8\064\uffa8\001\002\000" +
    "\016\035\137\036\134\037\135\040\136\041\140\070\173" +
    "\001\002\000\016\025\126\027\125\031\131\032\127\036" +
    "\123\065\124\001\002\000\016\035\137\036\134\037\135" +
    "\040\136\041\140\066\175\001\002\000\060\003\uffa4\007" +
    "\uffa4\012\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\062\uffa4\064\uffa4\001\002\000\056\003\uff92\007\uff92\012" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\064\uff92" +
    "\001\002\000\060\003\uffb1\007\uffb1\012\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\062\uffb1\064\uffb1\001\002" +
    "\000\056\003\uff9d\007\uff9d\012\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\064\uff9d\001\002\000\022\025\uffb9" +
    "\027\uffb9\031\uffb9\032\uffb9\033\204\034\205\036\uffb9\065" +
    "\uffb9\001\002\000\016\025\126\027\125\031\131\032\127" +
    "\036\123\065\124\001\002\000\072\003\uffc2\007\uffc2\012" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\035" +
    "\137\036\134\037\135\040\136\041\140\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\062\uffc2\064\uffc2\001" +
    "\002\000\060\003\uffc4\007\uffc4\012\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\062\uffc4\064\uffc4\001\002\000" +
    "\060\003\uffc3\007\uffc3\012\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\062\uffc3\064\uffc3\001\002\000\022\025" +
    "\uffb9\027\uffb9\031\uffb9\032\uffb9\033\211\034\212\036\uffb9" +
    "\065\uffb9\001\002\000\016\025\126\027\125\031\131\032" +
    "\127\036\123\065\124\001\002\000\072\003\uffbc\007\uffbc" +
    "\012\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\035\137\036\134\037\135\040\136\041\140\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\062\uffbc\064\uffbc" +
    "\001\002\000\060\003\uffbe\007\uffbe\012\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\062\uffbe\064\uffbe\001\002" +
    "\000\060\003\uffbd\007\uffbd\012\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\062\uffbd\064\uffbd\001\002\000\004" +
    "\063\uff9a\001\002\000\004\063\uff98\001\002\000\020\025" +
    "\126\027\125\031\131\032\127\036\123\065\217\066\222" +
    "\001\002\000\004\063\uff9c\001\002\000\020\025\126\027" +
    "\125\031\131\032\127\033\254\036\123\065\124\001\002" +
    "\000\004\066\252\001\002\000\010\060\246\061\247\066" +
    "\uff88\001\002\000\004\063\uff99\001\002\000\030\035\137" +
    "\036\134\037\135\040\136\041\140\052\224\053\227\054" +
    "\231\055\226\056\230\057\225\001\002\000\020\025\126" +
    "\027\125\031\131\032\127\033\245\036\123\065\124\001" +
    "\002\000\020\025\126\027\125\031\131\032\127\033\243" +
    "\036\123\065\124\001\002\000\020\025\126\027\125\031" +
    "\131\032\127\033\241\036\123\065\124\001\002\000\020" +
    "\025\126\027\125\031\131\032\127\033\237\036\123\065" +
    "\124\001\002\000\020\025\126\027\125\031\131\032\127" +
    "\033\235\036\123\065\124\001\002\000\020\025\126\027" +
    "\125\031\131\032\127\033\233\036\123\065\124\001\002" +
    "\000\022\035\137\036\134\037\135\040\136\041\140\060" +
    "\uff85\061\uff85\066\uff85\001\002\000\010\060\uff7e\061\uff7e" +
    "\066\uff7e\001\002\000\022\035\137\036\134\037\135\040" +
    "\136\041\140\060\uff83\061\uff83\066\uff83\001\002\000\010" +
    "\060\uff7c\061\uff7c\066\uff7c\001\002\000\022\035\137\036" +
    "\134\037\135\040\136\041\140\060\uff86\061\uff86\066\uff86" +
    "\001\002\000\010\060\uff7f\061\uff7f\066\uff7f\001\002\000" +
    "\022\035\137\036\134\037\135\040\136\041\140\060\uff84" +
    "\061\uff84\066\uff84\001\002\000\010\060\uff7d\061\uff7d\066" +
    "\uff7d\001\002\000\022\035\137\036\134\037\135\040\136" +
    "\041\140\060\uff82\061\uff82\066\uff82\001\002\000\010\060" +
    "\uff7b\061\uff7b\066\uff7b\001\002\000\022\035\137\036\134" +
    "\037\135\040\136\041\140\060\uff87\061\uff87\066\uff87\001" +
    "\002\000\010\060\uff80\061\uff80\066\uff80\001\002\000\016" +
    "\025\126\027\125\031\131\032\127\036\123\065\217\001" +
    "\002\000\016\025\126\027\125\031\131\032\127\036\123" +
    "\065\217\001\002\000\004\066\uff8a\001\002\000\004\066" +
    "\uff89\001\002\000\004\063\uff9b\001\002\000\016\035\137" +
    "\036\134\037\135\040\136\041\140\066\256\001\002\000" +
    "\004\066\255\001\002\000\010\060\uff7a\061\uff7a\066\uff7a" +
    "\001\002\000\036\035\uff73\036\uff73\037\uff73\040\uff73\041" +
    "\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73" +
    "\060\uff81\061\uff81\066\uff81\001\002\000\022\025\uffb9\027" +
    "\uffb9\031\uffb9\032\uffb9\033\262\034\263\036\uffb9\065\uffb9" +
    "\001\002\000\016\025\126\027\125\031\131\032\127\036" +
    "\123\065\124\001\002\000\072\003\uffc5\007\uffc5\012\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\137" +
    "\036\134\037\135\040\136\041\140\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\062\uffc5\064\uffc5\001\002" +
    "\000\060\003\uffc7\007\uffc7\012\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\062\uffc7\064\uffc7\001\002\000\060" +
    "\003\uffc6\007\uffc6\012\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\062\uffc6\064\uffc6\001\002\000\056\003\uff91" +
    "\007\uff91\012\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051" +
    "\uff91\064\uff91\001\002\000\056\003\uff93\007\uff93\012\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\044\uff93" +
    "\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\064\uff93\001" +
    "\002\000\006\063\uffdc\066\270\001\002\000\004\063\uffdb" +
    "\001\002\000\004\063\uffde\001\002\000\020\002\uffdf\003" +
    "\uffdf\010\uffdf\016\uffdf\017\uffdf\020\uffdf\064\uffdf\001\002" +
    "\000\010\002\ufff0\011\052\064\273\001\002\000\004\002" +
    "\ufff3\001\002\000\016\002\uffe6\003\030\016\017\017\024" +
    "\020\032\064\uffe6\001\002\000\004\002\uffec\001\002\000" +
    "\004\002\ufff6\001\002\000\006\002\uffeb\064\300\001\002" +
    "\000\004\002\uffed\001\002\000\006\063\uffe2\066\303\001" +
    "\002\000\004\063\uffe1\001\002\000\004\063\uffe4\001\002" +
    "\000\010\002\uffef\010\047\064\306\001\002\000\016\002" +
    "\uffe6\003\030\016\017\017\024\020\032\064\uffe6\001\002" +
    "\000\004\002\ufff2\001\002\000\004\002\ufff5\001\002\000" +
    "\004\002\uffe9\001\002\000\006\002\uffe8\064\312\001\002" +
    "\000\004\002\uffea\001\002\000\004\044\320\001\002\000" +
    "\004\044\315\001\002\000\006\033\316\034\317\001\002" +
    "\000\066\002\uffd2\003\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\062\uffd2" +
    "\064\uffd2\001\002\000\066\002\uffcf\003\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\062\uffcf\064\uffcf\001\002\000\006\033\321\034" +
    "\322\001\002\000\066\002\uffcc\003\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\062\uffcc\064\uffcc\001\002\000\066\002\uffc9\003\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\062\uffc9\064\uffc9\001\002\000\012" +
    "\002\uffd9\010\uffd9\011\uffd9\064\uffd9\001\002\000\022\002" +
    "\uffd7\003\uffd7\010\uffd7\011\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\064\uffd7\001\002\000\004\044\334\001\002\000\004\044" +
    "\332\001\002\000\004\044\330\001\002\000\004\034\331" +
    "\001\002\000\066\002\uffca\003\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\062\uffca\064\uffca\001\002\000\004\033\333\001\002\000" +
    "\066\002\uffcd\003\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\062\uffcd\064" +
    "\uffcd\001\002\000\006\033\335\034\336\001\002\000\066" +
    "\002\uffd3\003\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\062\uffd3\064\uffd3" +
    "\001\002\000\066\002\uffd0\003\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\062\uffd0\064\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\012\002\007\003\011\004\006\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\021\007\024\010\014\011\025\016\026\025" +
    "\015\026\020\027\022\030\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\322\026\020\027" +
    "\022\030\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\047\020\053\021\044\022\043\023\050\024\052" +
    "\001\001\000\002\001\001\000\020\010\042\011\025\016" +
    "\026\025\015\026\020\027\022\030\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\303\025\015\026\020\027\022\030\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\271\025\015\026\020\027\022\030\017\001\001" +
    "\000\004\055\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\054\001\001\000\002\001\001\000\004" +
    "\056\056\001\001\000\034\030\057\032\104\033\102\034" +
    "\071\035\063\036\070\037\100\042\076\043\111\051\062" +
    "\052\075\057\113\060\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\257\001\001\000\002\001\001\000" +
    "\006\053\215\054\212\001\001\000\004\034\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\201\001\001\000\002\001\001\000\004\055\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\176\041\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\044\170\045\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\127\047\121\063" +
    "\131\064\132\001\001\000\010\040\151\041\154\050\150" +
    "\001\001\000\012\046\127\047\121\063\147\064\132\001" +
    "\001\000\012\046\127\047\121\063\145\064\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\127\047\121\063\144\064\132\001" +
    "\001\000\012\046\127\047\121\063\143\064\132\001\001" +
    "\000\012\046\127\047\121\063\142\064\132\001\001\000" +
    "\012\046\127\047\121\063\141\064\132\001\001\000\012" +
    "\046\127\047\121\063\140\064\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\127\047\121\063\171\064\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\127\047\121\063\173" +
    "\064\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\127\047\121\063\202\064\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\127\047\121\063\207\064" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\046" +
    "\127\047\121\061\217\062\220\063\222\064\132\001\001" +
    "\000\002\001\001\000\012\046\127\047\121\063\252\064" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\046\127\047\121\063" +
    "\243\064\132\001\001\000\012\046\127\047\121\063\241" +
    "\064\132\001\001\000\012\046\127\047\121\063\237\064" +
    "\132\001\001\000\012\046\127\047\121\063\235\064\132" +
    "\001\001\000\012\046\127\047\121\063\233\064\132\001" +
    "\001\000\012\046\127\047\121\063\231\064\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\046\127" +
    "\047\121\061\250\062\220\063\222\064\132\001\001\000" +
    "\016\046\127\047\121\061\247\062\220\063\222\064\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\127\047" +
    "\121\063\260\064\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\275\013\274\022\273\023" +
    "\050\024\052\001\001\000\002\001\001\000\014\016\276" +
    "\025\015\026\020\027\022\030\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\306\015\307\017\304\020\053\021\044\001\001" +
    "\000\014\016\310\025\015\026\020\027\022\030\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {



private void syntaxError(String id, int line, String message){
    List<CompilationError> errors = ErrorHandlerService.compilationErrors.getErrors();
    CompilationError syntaxError = new CompilationError(id, message, ErrorType.SYNTAX, line);
    errors.add(syntaxError);
}

private void semanticError(String id, int line, String message){
    List<CompilationError> errors = ErrorHandlerService.compilationErrors.getErrors();
    CompilationError semanticError = new CompilationError(id, message, ErrorType.SEMANTIC, line);
    errors.add(semanticError);
}

private void validateDeclaration(String id, String value,  int linea){
    VariableHandler.validate(id, value, linea);
}


private void validateId(String id, int linea){
    VariableHandler.validateId(id, linea);
}

private static final String BAD_TYPE_ERROR_CODE = "021";

private static final String NOT_A_STATEMENT_ERROR_CODE = "003";
private static final String NOT_A_DECLARATION_ERROR_CODE = "004";
private static final String EXPECTED_SEMI_COLON_ERROR_CODE = "005";
private static final String MISSING_CLOSING_BRACKET_ERROR_CODE = "006";
private static final String MAIN_PROGRAM_EXPECTED_ERROR_CODE = "007";
private static final String INIT_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String ITERATE_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String EXPECTED_IDENTIFIER_ERROR_CODE = "009";
private static final String EXPECTED_PROGRAM_KEYWORD_ERROR_CODE = "010";
private static final String VALUE_EXPECTED_ERROR_CODE = "011";
private static final String FUNCTION_BODY_ERROR_CODE = "012";
private static final String NOT_A_FUNCTION_ERROR_CODE = "013";
private static final String PROGRAM_BODY_ERROR_CODE = "014";
private static final String BLOCK_ERROR_ERROR_CODE = "015";
private static final String FUNCTION_BODY_TWO_ARGS_ERROR_CODE = "016";
private static final String IF_COND_EXPECTED_ERROR_CODE = "017";
private static final String IF_BAD_SYNTAX_ERROR_CODE = "018";

private static final String NOT_A_STATEMENT_MESSAGE = "Not a statement";
private static final String NOT_A_DECLARATION_MESSAGE = "Not a declaration";
private static final String EXPECTED_SEMI_COLON_MESSAGE = "<;> Expected";
private static final String MISSING_CLOSING_BRACKET_MESSAGE = "<}> Expected";
private static final String MAIN_PROGRAM_EXPECTED_MESSAGE = "<program { ... }> main program Expected";
private static final String INIT_FUNCTION_EXPECTED_MESSAGE = "<init> Function Expected";
private static final String ITERATE_FUNCTION_EXPECTED_MESSAGE = "<iterate> Function Expected";
private static final String EXPECTED_IDENTIFIER_MESSAGE = "<identifier> Expected";
private static final String EXPECTED_PROGRAM_KEYWORD_MESSAGE = "<program> Keyword Expected";
private static final String VALUE_EXPECTED_MESSAGE = "Bad syntax <value> Expected";
private static final String FUNCTION_BODY_MESSAGE = "Bad syntax < (value) > Expected";
private static final String NOT_A_FUNCTION_MESSAGE = "Bad syntax < function_name() > Expected";
private static final String PROGRAM_BODY_ERROR_MESSAGE = "Bad syntax < program id { ... } > Expected";
private static final String BLOCK_ERROR_MESSAGE = "Bad syntax < { ... } > Block Expected";
private static final String FUNCTION_BODY_TWO_ARGS_ERROR_MESSAGE = "Bad syntax < (value, value) > Expected";
private static final String IF_COND_EXPECTED_ERROR_MESSAGE = "Bad syntax < ( bool expr ) > Expected";
private static final String IF_BAD_SYNTAX_ERROR_MESSAGE = "Bad syntax < if ( bool expr ) { ... } > Expected";


  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // value ::= returnFunction 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // value ::= PIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // value ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= SUBTRACTION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= expr MODULUS expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= expr SUBTRACTION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= expr ADDITION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cond ::= LPAR INTEGER_LITERAL RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cond ::= expr LESS_THAN_OR_EQUAL_TO INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cond ::= expr GREATHER_THAN_OR_EQUAL_TO INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cond ::= expr LESS_THAN INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cond ::= expr GREATER_THAN INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cond ::= expr NOT_EQUAL INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cond ::= expr EQUAL_TO INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cond ::= LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cond ::= expr LESS_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cond ::= expr GREATHER_THAN_OR_EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cond ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cond ::= expr GREATER_THAN expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cond ::= expr NOT_EQUAL expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cond ::= expr EQUAL_TO expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cond",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condList ::= cond 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condList",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condList ::= cond AND condList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condList",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // condList ::= cond OR condList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condList",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_STATEMENT_ERROR_CODE, eleft+1, NOT_A_STATEMENT_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stmtError ::= function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stmtError ::= assignment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stmtError ::= declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmt ::= stmtError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // stmt ::= if_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stmt ::= function SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmt ::= assignment SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmt ::= declaration SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtList ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtList",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtList ::= stmtList stmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtList",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // block ::= LBRACKET stmtList RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_statementCond ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementCond",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_statementCondError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(IF_BAD_SYNTAX_ERROR_CODE, eleft+1, IF_BAD_SYNTAX_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementCondError",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_statementCondError ::= LPAR RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(IF_COND_EXPECTED_ERROR_CODE, eleft+1, IF_COND_EXPECTED_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementCondError",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_statementCond ::= if_statementCondError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementCond",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_statementCond ::= LPAR condList RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementCond",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_statementSignature ::= IF if_statementCond 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statementSignature",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_statement ::= if_statementSignature block 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("if_statement",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // returnFunctionBody ::= oneArgfunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("returnFunctionBody",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // returnFunctionType ::= D_READ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("returnFunctionType",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // returnFunctionType ::= A_READ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("returnFunctionType",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // returnFunction ::= returnFunctionType returnFunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("returnFunction",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // twoArgsfunctionBodyError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 semanticError("022", eleft+1, "Bad number of parameters, only two parameters are expected");   
           // syntaxError(FUNCTION_BODY_TWO_ARGS_ERROR_CODE, eleft+1, FUNCTION_BODY_TWO_ARGS_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBodyError",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // twoArgsfunctionBody ::= twoArgsfunctionBodyError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBody",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // twoArgsfunctionBody ::= LPAR expr COMA expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBody",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // twoArgsfunctiontype ::= D_WRITE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // twoArgsfunctiontype ::= A_WRITE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // twoArgsfunctiontype ::= MODE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // twoArgsfunction ::= twoArgsfunctiontype twoArgsfunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunction",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oneArgfunctionBodyError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 semanticError("023", eleft+1, "Bad number of parameters, only one parameter is expected");     
           // syntaxError(FUNCTION_BODY_ERROR_CODE, eleft+1, FUNCTION_BODY_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBodyError",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oneArgfunctionBody ::= oneArgfunctionBodyError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBody",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oneArgfunctionBody ::= LPAR IDENTIFIER RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBody",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oneArgfunctionBody ::= LPAR STRING_LITERAL RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBody",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oneArgfunctionBody ::= LPAR INTEGER_LITERAL RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBody",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // oneArgfunctiontype ::= PRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // oneArgfunctiontype ::= WAIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // oneArgfunctiontype ::= START 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // oneArgfunction ::= oneArgfunctiontype oneArgfunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunction",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function ::= twoArgsfunction 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("function",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function ::= oneArgfunction 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("function",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assignmentType ::= ASSIGNMENT_MODULUS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignmentType ::= ASSIGNMENT_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignmentType ::= ASSIGNMENT_MULTIPLICATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignmentType ::= ASSIGNMENT_SUBTRACTION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignmentType ::= ASSIGNMENT_ADDITION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignmentType ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignmentError ::= assignmentType 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE);
               syntaxError(VALUE_EXPECTED_ERROR_CODE, eleft+1, VALUE_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentError",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= assignmentError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= D_READ assignmentType expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= D_READ ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= D_READ ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= A_READ assignmentType expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment ::= A_READ ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment ::= A_READ ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment ::= PROGRAM assignmentType expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment ::= PROGRAM ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment ::= PROGRAM ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		  semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
                validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= IDENTIFIER assignmentType expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment ::= IDENTIFIER ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= IDENTIFIER ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 validateId(id.toString(), idleft+1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= FLOAT PROGRAM ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");   
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= STRING A_READ ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= INT PROGRAM ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");
          validateDeclaration(id.toString(), val.toString(), idleft+1);
          semanticError(BAD_TYPE_ERROR_CODE, idleft+1, "Bad types, int " + "cannot be converted to " + " string");    
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= FLOAT PROGRAM ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= STRING A_READ ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");
          validateDeclaration(id.toString(), val.toString(), idleft+1);
          semanticError(BAD_TYPE_ERROR_CODE, idleft+1, "Bad types, string " + "cannot be converted to " + " int");    
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= INT D_READ ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          semanticError("025", idleft+1, "A reserved word cannot be used as an identifier");
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= FLOAT IDENTIFIER ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= STRING IDENTIFIER ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= INT IDENTIFIER ASSIGNMENT STRING_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
          semanticError(BAD_TYPE_ERROR_CODE, idleft+1, "Bad types, int " + "cannot be converted to " + " string");    
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= FLOAT IDENTIFIER ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= STRING IDENTIFIER ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
          semanticError(BAD_TYPE_ERROR_CODE, idleft+1, "Bad types, string " + "cannot be converted to " + " int");    
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= INT IDENTIFIER ASSIGNMENT INTEGER_LITERAL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
          validateDeclaration(id.toString(), val.toString(), idleft+1);
        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // globalDeclarationError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_DECLARATION_ERROR_CODE, eleft+1, NOT_A_DECLARATION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationError",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // globalDeclarationError ::= declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationError",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // globalDeclaration ::= globalDeclarationError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // globalDeclaration ::= declaration SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // globalDeclarationList ::= globalDeclaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // globalDeclarationList ::= globalDeclaration globalDeclarationList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mainIterationSignatureError ::= ITERATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mainIterationSignatureError ::= ITERATE RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainIterationSignatureError ::= ITERATE LPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mainIterationSignature ::= mainIterationSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignature",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainIterationSignature ::= ITERATE LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignature",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainIteration ::= mainIterationSignature block 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIteration",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mainInitSignatureError ::= INIT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mainInitSignatureError ::= INIT RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainInitSignatureError ::= INIT LPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainInitSignature ::= mainInitSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignature",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mainInitSignature ::= INIT LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignature",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainInit ::= mainInitSignature block 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInit",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mainStmtListGd ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListGd",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mainStmtListGd ::= globalDeclarationList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListGd",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mainStmtList2Error ::= mainInit mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2Error",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mainStmtList2 ::= mainStmtList2Error 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mainStmtList2 ::= mainInit mainStmtListGd RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mainStmtList1Error ::= mainIteration mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1Error",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mainStmtList1 ::= mainStmtList1Error 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mainStmtList1 ::= mainIteration mainStmtListGd RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainStmtListError ::= mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mainStmtListError ::= mainStmtListGd mainIteration mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mainStmtListError ::= mainStmtListGd mainInit mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mainStmtListError ::= mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mainStmtListError ::= mainStmtListGd mainIteration mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mainStmtListError ::= mainStmtListGd mainInit mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mainStmtList ::= mainStmtListError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mainStmtList ::= mainStmtListGd mainIteration mainStmtListGd mainStmtList2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mainStmtList ::= mainStmtListGd mainInit mainStmtListGd mainStmtList1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mainBlockError ::= mainStmtList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(BLOCK_ERROR_ERROR_CODE, eleft+1, BLOCK_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlockError",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mainBlock ::= mainBlockError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlock",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mainBlock ::= LBRACKET mainStmtList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlock",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainProgramSignatureError ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_PROGRAM_KEYWORD_ERROR_CODE, eleft+1, EXPECTED_PROGRAM_KEYWORD_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignatureError",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainProgramSignatureError ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignatureError",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainProgramSignature ::= mainProgramSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignature",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainProgramSignature ::= PROGRAM IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignature",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainProgramError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MAIN_PROGRAM_EXPECTED_ERROR_CODE, eleft+1, MAIN_PROGRAM_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramError",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainProgram ::= mainProgramError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgram",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainProgram ::= mainProgramSignature mainBlock 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgram",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

