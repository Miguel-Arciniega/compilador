
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 07 19:06:05 MST 2022
//----------------------------------------------------

package com.deimos.compilador.services.analysis;

import com.deimos.compilador.model.errors.CompilationError;
import com.deimos.compilador.model.errors.ErrorType;
import com.deimos.compilador.services.ErrorHandlerService;
import java_cup.runtime.Symbol;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 07 19:06:05 MST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\003\000\002\010\006\000\002" +
    "\010\006\000\002\010\003\000\002\011\006\000\002\011" +
    "\006\000\002\011\004\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\013\004\000\002\014\005\000\002\014\003\000\002" +
    "\015\004\000\002\016\003\000\002\016\002\000\002\017" +
    "\004\000\002\020\005\000\002\020\003\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\022\004\000" +
    "\002\023\005\000\002\023\003\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\026\004\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\005\000\002" +
    "\032\003\000\002\033\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\005\000\002\041\003\000\002\042" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\044\007\000\002\044\003\000\002\045\003\000" +
    "\002\046\005\000\002\047\004\000\002\047\002\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\004\000\002\052\005\000\002\052\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\010\003\004\007\011\031\006\001\002\000" +
    "\004\002\ufffe\001\002\000\024\002\ufffc\003\ufffc\010\ufffc" +
    "\011\ufffc\016\ufffc\017\ufffc\020\ufffc\063\ufffc\064\ufffc\001" +
    "\002\000\024\002\ufffa\003\ufffa\010\ufffa\011\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\063\ufffa\064\ufffa\001\002\000\024\002" +
    "\uffe6\003\031\010\uffe6\011\uffe6\016\016\017\023\020\033" +
    "\063\032\064\uffe6\001\002\000\004\002\014\001\002\000" +
    "\026\002\ufffb\003\ufffb\010\ufffb\011\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\031\013\063\ufffb\064\ufffb\001\002\000\004\002" +
    "\uffff\001\002\000\024\002\ufffd\003\ufffd\010\ufffd\011\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\063\ufffd\064\ufffd\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufff7\001\002\000\020" +
    "\031\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\001\002\000\012\002\uffe7\010\uffe7\011\uffe7\064\uffe7" +
    "\001\002\000\020\031\056\044\075\045\053\046\066\047" +
    "\070\050\062\051\052\001\002\000\024\002\uffd5\003\uffd5" +
    "\010\uffd5\011\uffd5\016\uffd5\017\uffd5\020\uffd5\062\176\064" +
    "\uffd5\001\002\000\022\002\uffd8\003\031\010\uffd8\011\uffd8" +
    "\016\016\017\023\020\033\064\uffd8\001\002\000\020\031" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\004\002\000\001\002\000\022\002\uffd6\003" +
    "\uffd6\010\uffd6\011\uffd6\016\uffd6\017\uffd6\020\uffd6\064\uffd6" +
    "\001\002\000\004\002\ufff8\001\002\000\012\002\uffee\010" +
    "\040\011\043\064\037\001\002\000\004\002\ufff4\001\002" +
    "\000\022\002\uffd4\003\uffd4\010\uffd4\011\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\064\uffd4\001\002\000\022\002\uffe6\003\031" +
    "\010\uffe6\011\uffe6\016\016\017\023\020\033\064\uffe6\001" +
    "\002\000\020\031\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\001\002\000\004\002\ufff9\001\002\000" +
    "\020\002\uffe6\003\031\010\uffe6\016\016\017\023\020\033" +
    "\064\uffe6\001\002\000\004\063\uffe3\001\002\000\004\002" +
    "\ufff1\001\002\000\010\063\uffe0\065\163\066\164\001\002" +
    "\000\020\002\uffe6\003\031\011\uffe6\016\016\017\023\020" +
    "\033\064\uffe6\001\002\000\004\063\047\001\002\000\010" +
    "\063\uffda\065\150\066\151\001\002\000\004\063\uffdd\001" +
    "\002\000\004\063\047\001\002\000\020\002\uffe5\003\uffe5" +
    "\011\uffe5\016\uffe5\017\uffe5\020\uffe5\064\uffe5\001\002\000" +
    "\046\003\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\026\uffb5\030\uffb5\031\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\064\uffb5\001\002" +
    "\000\046\003\072\016\016\017\023\020\033\021\074\022" +
    "\102\023\073\024\077\026\054\030\063\031\056\044\075" +
    "\045\053\046\066\047\070\050\062\051\052\064\060\001" +
    "\002\000\050\003\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\026\uffb0\030\uffb0\031\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\062\147" +
    "\064\uffb0\001\002\000\070\002\uffc7\003\uffc7\010\uffc7\011" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\036\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\062\uffc7\064\uffc7\065\uffc7\001\002\000\070\002" +
    "\uffcb\003\uffcb\010\uffcb\011\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\062\uffcb\064\uffcb\065" +
    "\uffcb\001\002\000\006\003\uffbc\065\uffbc\001\002\000\050" +
    "\003\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\026\uffae\030\uffae\031\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\062\146\064\uffae\001" +
    "\002\000\016\044\075\045\053\046\066\047\070\050\062" +
    "\051\052\001\002\000\050\003\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\062\uffc6\064\uffc6\001\002\000\022\002\uffb7\003\uffb7" +
    "\010\uffb7\011\uffb7\016\uffb7\017\uffb7\020\uffb7\064\uffb7\001" +
    "\002\000\056\002\uffcd\003\uffcd\010\uffcd\011\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026" +
    "\uffcd\030\uffcd\031\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\062\uffcd\064\uffcd\001\002\000\070\002" +
    "\uffc8\003\uffc8\010\uffc8\011\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\062\uffc8\064\uffc8\065" +
    "\uffc8\001\002\000\006\003\uffbb\065\uffbb\001\002\000\050" +
    "\003\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\026\uffc5\030\uffc5\031\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\062\uffc5\064\uffc5\001" +
    "\002\000\004\065\141\001\002\000\070\002\uffca\003\uffca" +
    "\010\uffca\011\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\026\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\036\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\062\uffca\064\uffca\065\uffca\001\002" +
    "\000\056\002\uffce\003\uffce\010\uffce\011\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\030\uffce\031\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\062\uffce\064\uffce\001\002\000\070\002\uffc9" +
    "\003\uffc9\010\uffc9\011\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\036\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\062\uffc9\064\uffc9\065\uffc9" +
    "\001\002\000\050\003\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\062" +
    "\137\064\uffaf\001\002\000\046\003\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\030" +
    "\uffad\031\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\064\uffad\001\002\000\004\065\uffc1\001\002\000" +
    "\004\065\uffc3\001\002\000\070\002\uffcc\003\uffcc\010\uffcc" +
    "\011\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\036\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\062\uffcc\064\uffcc\065\uffcc\001\002\000\006" +
    "\003\104\065\105\001\002\000\006\003\uffbd\065\uffbd\001" +
    "\002\000\046\003\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\026\uffb6\030\uffb6\031\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\064\uffb6" +
    "\001\002\000\046\003\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\064" +
    "\uffb1\001\002\000\004\065\uffc2\001\002\000\050\003\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\026\uffb9\030\uffb9\031\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\062\uffb9\064\uffb9\001\002\000" +
    "\050\003\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\026\uffb8\030\uffb8\031\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\062\uffb8\064\uffb8" +
    "\001\002\000\016\031\113\032\110\033\111\034\115\036" +
    "\107\065\112\001\002\000\050\003\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\030" +
    "\uffbe\031\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\062\uffbe\064\uffbe\001\002\000\016\031\113\032" +
    "\110\033\111\034\115\036\107\065\112\001\002\000\074" +
    "\002\uffa1\003\uffa1\010\uffa1\011\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\030\uffa1" +
    "\031\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\062\uffa1" +
    "\064\uffa1\066\uffa1\070\uffa1\001\002\000\074\002\uffa4\003" +
    "\uffa4\010\uffa4\011\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\031\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\062\uffa4\064\uffa4\066" +
    "\uffa4\070\uffa4\001\002\000\016\031\113\032\110\033\111" +
    "\034\115\036\107\065\112\001\002\000\074\002\uffa2\003" +
    "\uffa2\010\uffa2\011\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\026\uffa2\030\uffa2\031\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\062\uffa2\064\uffa2\066" +
    "\uffa2\070\uffa2\001\002\000\074\002\uffa5\003\uffa5\010\uffa5" +
    "\011\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\026\uffa5\030\uffa5\031\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\062\uffa5\064\uffa5\066\uffa5\070\uffa5" +
    "\001\002\000\074\002\uffa3\003\uffa3\010\uffa3\011\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\026\uffa3\030\uffa3\031\uffa3\035\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\041\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\062\uffa3\064\uffa3\066\uffa3\070\uffa3\001\002\000" +
    "\016\035\123\036\120\037\121\040\122\041\124\070\117" +
    "\001\002\000\016\031\113\032\110\033\111\034\115\036" +
    "\107\065\112\001\002\000\016\031\113\032\110\033\111" +
    "\034\115\036\107\065\112\001\002\000\016\031\113\032" +
    "\110\033\111\034\115\036\107\065\112\001\002\000\016" +
    "\031\113\032\110\033\111\034\115\036\107\065\112\001" +
    "\002\000\016\031\113\032\110\033\111\034\115\036\107" +
    "\065\112\001\002\000\016\031\113\032\110\033\111\034" +
    "\115\036\107\065\112\001\002\000\074\002\uffa8\003\uffa8" +
    "\010\uffa8\011\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\026\uffa8\030\uffa8\031\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\062\uffa8\064\uffa8\066\uffa8" +
    "\070\uffa8\001\002\000\074\002\uffac\003\uffac\010\uffac\011" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\026\uffac\030\uffac\031\uffac\035\uffac\036\uffac\037" +
    "\121\040\122\041\124\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\062\uffac\064\uffac\066\uffac\070\uffac\001" +
    "\002\000\074\002\uffa9\003\uffa9\010\uffa9\011\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026" +
    "\uffa9\030\uffa9\031\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\062\uffa9\064\uffa9\066\uffa9\070\uffa9\001\002\000\074" +
    "\002\uffaa\003\uffaa\010\uffaa\011\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\030\uffaa" +
    "\031\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\062\uffaa" +
    "\064\uffaa\066\uffaa\070\uffaa\001\002\000\074\002\uffab\003" +
    "\uffab\010\uffab\011\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\026\uffab\030\uffab\031\uffab\035" +
    "\uffab\036\uffab\037\121\040\122\041\124\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\062\uffab\064\uffab\066" +
    "\uffab\070\uffab\001\002\000\016\035\123\036\120\037\121" +
    "\040\122\041\124\066\133\001\002\000\050\003\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\026\uffba\030\uffba\031\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\062\uffba\064\uffba\001\002\000\016" +
    "\035\123\036\120\037\121\040\122\041\124\066\135\001" +
    "\002\000\074\002\uffa6\003\uffa6\010\uffa6\011\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026" +
    "\uffa6\030\uffa6\031\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\062\uffa6\064\uffa6\066\uffa6\070\uffa6\001\002\000\074" +
    "\002\uffa7\003\uffa7\010\uffa7\011\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\030\uffa7" +
    "\031\uffa7\035\uffa7\036\uffa7\037\121\040\122\041\124\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\062\uffa7" +
    "\064\uffa7\066\uffa7\070\uffa7\001\002\000\046\003\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\026\uffb3\030\uffb3\031\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\064\uffb3\001\002\000\050\003\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\030\uffc4\031\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\062\uffc4\064\uffc4\001\002\000" +
    "\016\031\113\032\110\033\111\034\115\036\107\065\112" +
    "\001\002\000\016\035\123\036\120\037\121\040\122\041" +
    "\124\066\143\001\002\000\050\003\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\062\uffc0\064\uffc0\001\002\000\016\031\113\032" +
    "\110\033\111\034\115\036\107\065\112\001\002\000\070" +
    "\002\uffcf\003\uffcf\010\uffcf\011\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\035\123\036\120\037\121\040\122\041\124\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\062\uffcf" +
    "\064\uffcf\001\002\000\046\003\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\030\uffb2" +
    "\031\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\064\uffb2\001\002\000\046\003\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\030" +
    "\uffb4\031\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\064\uffb4\001\002\000\006\063\uffdc\066\152\001" +
    "\002\000\004\063\uffdb\001\002\000\004\063\uffde\001\002" +
    "\000\020\002\uffdf\003\uffdf\010\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\064\uffdf\001\002\000\010\002\ufff0\011\043\064\155" +
    "\001\002\000\004\002\ufff3\001\002\000\016\002\uffe6\003" +
    "\031\016\016\017\023\020\033\064\uffe6\001\002\000\004" +
    "\002\uffec\001\002\000\004\002\ufff6\001\002\000\006\002" +
    "\uffeb\064\162\001\002\000\004\002\uffed\001\002\000\006" +
    "\063\uffe2\066\165\001\002\000\004\063\uffe1\001\002\000" +
    "\004\063\uffe4\001\002\000\010\002\uffef\010\040\064\170" +
    "\001\002\000\016\002\uffe6\003\031\016\016\017\023\020" +
    "\033\064\uffe6\001\002\000\004\002\ufff2\001\002\000\004" +
    "\002\ufff5\001\002\000\004\002\uffe9\001\002\000\006\002" +
    "\uffe8\064\174\001\002\000\004\002\uffea\001\002\000\012" +
    "\002\uffd9\010\uffd9\011\uffd9\064\uffd9\001\002\000\022\002" +
    "\uffd7\003\uffd7\010\uffd7\011\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\064\uffd7\001\002\000\056\002\uffd3\003\uffd3\010\uffd3\011" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\030\uffd3\031\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\062\uffd3\064\uffd3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\012\002\007\003\011\004\006\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\023\007\025\010\014\011\027\016\026\025" +
    "\016\026\021\027\024\030\020\031\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\176\033\066\034\060\001" +
    "\001\000\002\001\001\000\014\025\174\026\021\027\024" +
    "\030\020\031\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\040" +
    "\020\044\021\035\022\034\023\041\024\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\033\011\027" +
    "\016\026\025\016\026\021\027\024\030\020\031\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\165" +
    "\025\016\026\021\027\024\030\020\031\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\153\025\016\026\021\027\024\030\020\031\017\001" +
    "\001\000\004\046\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\045\001\001\000\002\001\001\000" +
    "\004\047\047\001\001\000\032\030\050\031\017\032\070" +
    "\033\066\034\060\035\054\036\056\037\064\042\063\043" +
    "\075\050\077\051\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\105\045\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\115\054\113\001\001\000\002\001\001\000\006\052\135" +
    "\054\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\133\054\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\131\054\113\001\001\000\006\052\130\054\113\001\001" +
    "\000\006\052\127\054\113\001\001\000\006\052\126\054" +
    "\113\001\001\000\006\052\125\054\113\001\001\000\006" +
    "\052\124\054\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\052\141\054\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\144\054\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\157\013\156\022\155\023\041\024" +
    "\043\001\001\000\002\001\001\000\016\016\160\025\016" +
    "\026\021\027\024\030\020\031\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\170\015\171\017\166\020\044\021\035\001\001" +
    "\000\016\016\172\025\016\026\021\027\024\030\020\031" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {



private void syntaxError(String id, int line, String message){
    List<CompilationError> errors = ErrorHandlerService.compilationErrors.getErrors();
    CompilationError syntaxError = new CompilationError(id, message, ErrorType.SYNTAX, line);
    errors.add(syntaxError);
}

private static final String NOT_A_STATEMENT_ERROR_CODE = "003";
private static final String NOT_A_DECLARATION_ERROR_CODE = "004";
private static final String EXPECTED_SEMI_COLON_ERROR_CODE = "005";
private static final String MISSING_CLOSING_BRACKET_ERROR_CODE = "006";
private static final String MAIN_PROGRAM_EXPECTED_ERROR_CODE = "007";
private static final String INIT_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String ITERATE_FUNCTION_EXPECTED_ERROR_CODE = "008";
private static final String EXPECTED_IDENTIFIER_ERROR_CODE = "009";
private static final String EXPECTED_PROGRAM_KEYWORD_ERROR_CODE = "010";
private static final String VALUE_EXPECTED_ERROR_CODE = "011";
private static final String FUNCTION_BODY_ERROR_CODE = "012";
private static final String NOT_A_FUNCTION_ERROR_CODE = "013";
private static final String PROGRAM_BODY_ERROR_CODE = "014";
private static final String BLOCK_ERROR_ERROR_CODE = "015";
private static final String FUNCTION_BODY_TWO_ARGS_ERROR_CODE = "016";

private static final String NOT_A_STATEMENT_MESSAGE = "Not a statement";
private static final String NOT_A_DECLARATION_MESSAGE = "Not a declaration";
private static final String EXPECTED_SEMI_COLON_MESSAGE = "<;> Expected";
private static final String MISSING_CLOSING_BRACKET_MESSAGE = "<}> Expected";
private static final String MAIN_PROGRAM_EXPECTED_MESSAGE = "<program { ... }> main program Expected";
private static final String INIT_FUNCTION_EXPECTED_MESSAGE = "<init> Function Expected";
private static final String ITERATE_FUNCTION_EXPECTED_MESSAGE = "<iterate> Function Expected";
private static final String EXPECTED_IDENTIFIER_MESSAGE = "<identifier> Expected";
private static final String EXPECTED_PROGRAM_KEYWORD_MESSAGE = "<program> Keyword Expected";
private static final String VALUE_EXPECTED_MESSAGE = "Bad syntax <value> Expected";
private static final String FUNCTION_BODY_MESSAGE = "Bad syntax < (value) > Expected";
private static final String NOT_A_FUNCTION_MESSAGE = "Bad syntax < function_name() > Expected";
private static final String PROGRAM_BODY_ERROR_MESSAGE = "Bad syntax < program id { ... } > Expected";
private static final String BLOCK_ERROR_MESSAGE = "Bad syntax < { ... } > Block Expected";
private static final String FUNCTION_BODY_TWO_ARGS_ERROR_MESSAGE = "Bad syntax < (value, value) > Expected";


  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // value ::= PIN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // value ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("value",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= value 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= SUBTRACTION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr MODULUS expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr SUBTRACTION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr ADDITION expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_STATEMENT_ERROR_CODE, eleft+1, NOT_A_STATEMENT_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtError ::= function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtError ::= assignment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtError ::= declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtError",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmt ::= stmtError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= function SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= assignment SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt ::= declaration SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtList ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtList",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtList ::= stmtList stmt 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("stmtList",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block ::= LBRACKET stmtList RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // twoArgsfunctionBodyError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(FUNCTION_BODY_TWO_ARGS_ERROR_CODE, eleft+1, FUNCTION_BODY_TWO_ARGS_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBodyError",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // twoArgsfunctionBody ::= twoArgsfunctionBodyError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBody",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // twoArgsfunctionBody ::= LPAR expr COMA expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctionBody",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // twoArgsfunctiontype ::= D_WRITE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // twoArgsfunctiontype ::= A_WRITE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // twoArgsfunctiontype ::= MODE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunctiontype",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // twoArgsfunction ::= twoArgsfunctiontype twoArgsfunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("twoArgsfunction",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // oneArgfunctionBodyError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(FUNCTION_BODY_ERROR_CODE, eleft+1, FUNCTION_BODY_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBodyError",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // oneArgfunctionBody ::= LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctionBody",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // oneArgfunctiontype ::= PRINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // oneArgfunctiontype ::= WAIT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // oneArgfunctiontype ::= START 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunctiontype",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // oneArgfunction ::= oneArgfunctiontype oneArgfunctionBody 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("oneArgfunction",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function ::= twoArgsfunction 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("function",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function ::= oneArgfunction 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("function",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignmentType ::= ASSIGNMENT_MODULUS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignmentType ::= ASSIGNMENT_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignmentType ::= ASSIGNMENT_MULTIPLICATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignmentType ::= ASSIGNMENT_SUBTRACTION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignmentType ::= ASSIGNMENT_ADDITION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignmentType ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentType",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignmentError ::= assignmentType 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE);
               syntaxError(VALUE_EXPECTED_ERROR_CODE, eleft+1, VALUE_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignmentError",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= assignmentError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= IDENTIFIER assignmentType expr 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declarationType ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarationType",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declarationType ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarationType",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declarationType ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarationType",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= declarationType assignment 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // globalDeclarationError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_DECLARATION_ERROR_CODE, eleft+1, NOT_A_DECLARATION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationError",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // globalDeclarationError ::= declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_SEMI_COLON_ERROR_CODE, eleft+1, EXPECTED_SEMI_COLON_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationError",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // globalDeclaration ::= globalDeclarationError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // globalDeclaration ::= declaration SEMI 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclaration",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // globalDeclarationList ::= globalDeclaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // globalDeclarationList ::= globalDeclaration globalDeclarationList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("globalDeclarationList",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mainIterationSignatureError ::= ITERATE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mainIterationSignatureError ::= ITERATE RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainIterationSignatureError ::= ITERATE LPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignatureError",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // mainIterationSignature ::= mainIterationSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignature",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mainIterationSignature ::= ITERATE LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIterationSignature",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mainIteration ::= mainIterationSignature block 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainIteration",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mainInitSignatureError ::= INIT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mainInitSignatureError ::= INIT RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainInitSignatureError ::= INIT LPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(NOT_A_FUNCTION_ERROR_CODE, eleft+1, NOT_A_FUNCTION_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignatureError",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainInitSignature ::= mainInitSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignature",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mainInitSignature ::= INIT LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInitSignature",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mainInit ::= mainInitSignature block 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainInit",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mainStmtListGd ::= 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListGd",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mainStmtListGd ::= globalDeclarationList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListGd",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mainStmtList2Error ::= mainInit mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2Error",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mainStmtList2 ::= mainStmtList2Error 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // mainStmtList2 ::= mainInit mainStmtListGd RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList2",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mainStmtList1Error ::= mainIteration mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1Error",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mainStmtList1 ::= mainStmtList1Error 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mainStmtList1 ::= mainIteration mainStmtListGd RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList1",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainStmtListError ::= mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mainStmtListError ::= mainStmtListGd mainIteration mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mainStmtListError ::= mainStmtListGd mainInit mainStmtListGd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(MISSING_CLOSING_BRACKET_ERROR_CODE, eleft+1, MISSING_CLOSING_BRACKET_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mainStmtListError ::= mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE);
                   syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mainStmtListError ::= mainStmtListGd mainIteration mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 syntaxError(INIT_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, INIT_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mainStmtListError ::= mainStmtListGd mainInit mainStmtListGd RBRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 syntaxError(ITERATE_FUNCTION_EXPECTED_ERROR_CODE, eleft+1, ITERATE_FUNCTION_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtListError",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mainStmtList ::= mainStmtListError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mainStmtList ::= mainStmtListGd mainIteration mainStmtListGd mainStmtList2 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mainStmtList ::= mainStmtListGd mainInit mainStmtListGd mainStmtList1 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainStmtList",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mainBlockError ::= mainStmtList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(BLOCK_ERROR_ERROR_CODE, eleft+1, BLOCK_ERROR_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlockError",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mainBlock ::= mainBlockError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlock",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mainBlock ::= LBRACKET mainStmtList 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainBlock",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainProgramSignatureError ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_PROGRAM_KEYWORD_ERROR_CODE, eleft+1, EXPECTED_PROGRAM_KEYWORD_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignatureError",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainProgramSignatureError ::= PROGRAM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(EXPECTED_IDENTIFIER_ERROR_CODE, eleft+1, EXPECTED_IDENTIFIER_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignatureError",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainProgramSignature ::= mainProgramSignatureError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignature",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainProgramSignature ::= PROGRAM IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramSignature",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainProgramError ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 syntaxError(MAIN_PROGRAM_EXPECTED_ERROR_CODE, eleft+1, MAIN_PROGRAM_EXPECTED_MESSAGE); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgramError",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainProgram ::= mainProgramError 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgram",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainProgram ::= mainProgramSignature mainBlock 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("mainProgram",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

